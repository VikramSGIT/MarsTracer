/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/gl-matrix/esm/common.js":
/*!**********************************************!*\
  !*** ./node_modules/gl-matrix/esm/common.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ARRAY_TYPE: () => (/* binding */ ARRAY_TYPE),\n/* harmony export */   EPSILON: () => (/* binding */ EPSILON),\n/* harmony export */   RANDOM: () => (/* binding */ RANDOM),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   setMatrixArrayType: () => (/* binding */ setMatrixArrayType),\n/* harmony export */   toRadian: () => (/* binding */ toRadian)\n/* harmony export */ });\n/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nfunction setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};\n\n//# sourceURL=webpack://mars-raytracer/./node_modules/gl-matrix/esm/common.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat4.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   adjoint: () => (/* binding */ adjoint),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   determinant: () => (/* binding */ determinant),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   exactEquals: () => (/* binding */ exactEquals),\n/* harmony export */   frob: () => (/* binding */ frob),\n/* harmony export */   fromQuat: () => (/* binding */ fromQuat),\n/* harmony export */   fromQuat2: () => (/* binding */ fromQuat2),\n/* harmony export */   fromRotation: () => (/* binding */ fromRotation),\n/* harmony export */   fromRotationTranslation: () => (/* binding */ fromRotationTranslation),\n/* harmony export */   fromRotationTranslationScale: () => (/* binding */ fromRotationTranslationScale),\n/* harmony export */   fromRotationTranslationScaleOrigin: () => (/* binding */ fromRotationTranslationScaleOrigin),\n/* harmony export */   fromScaling: () => (/* binding */ fromScaling),\n/* harmony export */   fromTranslation: () => (/* binding */ fromTranslation),\n/* harmony export */   fromValues: () => (/* binding */ fromValues),\n/* harmony export */   fromXRotation: () => (/* binding */ fromXRotation),\n/* harmony export */   fromYRotation: () => (/* binding */ fromYRotation),\n/* harmony export */   fromZRotation: () => (/* binding */ fromZRotation),\n/* harmony export */   frustum: () => (/* binding */ frustum),\n/* harmony export */   getRotation: () => (/* binding */ getRotation),\n/* harmony export */   getScaling: () => (/* binding */ getScaling),\n/* harmony export */   getTranslation: () => (/* binding */ getTranslation),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   lookAt: () => (/* binding */ lookAt),\n/* harmony export */   mul: () => (/* binding */ mul),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   multiplyScalar: () => (/* binding */ multiplyScalar),\n/* harmony export */   multiplyScalarAndAdd: () => (/* binding */ multiplyScalarAndAdd),\n/* harmony export */   ortho: () => (/* binding */ ortho),\n/* harmony export */   orthoNO: () => (/* binding */ orthoNO),\n/* harmony export */   orthoZO: () => (/* binding */ orthoZO),\n/* harmony export */   perspective: () => (/* binding */ perspective),\n/* harmony export */   perspectiveFromFieldOfView: () => (/* binding */ perspectiveFromFieldOfView),\n/* harmony export */   perspectiveNO: () => (/* binding */ perspectiveNO),\n/* harmony export */   perspectiveZO: () => (/* binding */ perspectiveZO),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   rotateX: () => (/* binding */ rotateX),\n/* harmony export */   rotateY: () => (/* binding */ rotateY),\n/* harmony export */   rotateZ: () => (/* binding */ rotateZ),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   str: () => (/* binding */ str),\n/* harmony export */   sub: () => (/* binding */ sub),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   targetTo: () => (/* binding */ targetTo),\n/* harmony export */   translate: () => (/* binding */ translate),\n/* harmony export */   transpose: () => (/* binding */ transpose)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nfunction fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nfunction set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nfunction translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nfunction scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nfunction rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nfunction fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nfunction fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nfunction fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nfunction fromQuat2(out, a) {\n  var translation = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nfunction getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nfunction getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nfunction getRotation(out, mat) {\n  var scaling = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nfunction fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nfunction perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nvar perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nfunction perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nvar ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nfunction orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nfunction lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON && Math.abs(eyey - centery) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON && Math.abs(eyez - centerz) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nfunction targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nfunction str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nvar mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nvar sub = subtract;\n\n//# sourceURL=webpack://mars-raytracer/./node_modules/gl-matrix/esm/mat4.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec2.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec2.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   angle: () => (/* binding */ angle),\n/* harmony export */   ceil: () => (/* binding */ ceil),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   cross: () => (/* binding */ cross),\n/* harmony export */   dist: () => (/* binding */ dist),\n/* harmony export */   distance: () => (/* binding */ distance),\n/* harmony export */   div: () => (/* binding */ div),\n/* harmony export */   divide: () => (/* binding */ divide),\n/* harmony export */   dot: () => (/* binding */ dot),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   exactEquals: () => (/* binding */ exactEquals),\n/* harmony export */   floor: () => (/* binding */ floor),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   fromValues: () => (/* binding */ fromValues),\n/* harmony export */   inverse: () => (/* binding */ inverse),\n/* harmony export */   len: () => (/* binding */ len),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lerp: () => (/* binding */ lerp),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   mul: () => (/* binding */ mul),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   negate: () => (/* binding */ negate),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   scaleAndAdd: () => (/* binding */ scaleAndAdd),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   sqrDist: () => (/* binding */ sqrDist),\n/* harmony export */   sqrLen: () => (/* binding */ sqrLen),\n/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),\n/* harmony export */   squaredLength: () => (/* binding */ squaredLength),\n/* harmony export */   str: () => (/* binding */ str),\n/* harmony export */   sub: () => (/* binding */ sub),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   transformMat2: () => (/* binding */ transformMat2),\n/* harmony export */   transformMat2d: () => (/* binding */ transformMat2d),\n/* harmony export */   transformMat3: () => (/* binding */ transformMat3),\n/* harmony export */   transformMat4: () => (/* binding */ transformMat4),\n/* harmony export */   zero: () => (/* binding */ zero)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nfunction fromValues(x, y) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nfunction set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nfunction length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nfunction squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nfunction normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nfunction cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nfunction rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nfunction angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nfunction str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nvar len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nvar sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nvar mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nvar div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nvar dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nvar sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nvar sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();\n\n//# sourceURL=webpack://mars-raytracer/./node_modules/gl-matrix/esm/vec2.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec3.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   angle: () => (/* binding */ angle),\n/* harmony export */   bezier: () => (/* binding */ bezier),\n/* harmony export */   ceil: () => (/* binding */ ceil),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   copy: () => (/* binding */ copy),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   cross: () => (/* binding */ cross),\n/* harmony export */   dist: () => (/* binding */ dist),\n/* harmony export */   distance: () => (/* binding */ distance),\n/* harmony export */   div: () => (/* binding */ div),\n/* harmony export */   divide: () => (/* binding */ divide),\n/* harmony export */   dot: () => (/* binding */ dot),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   exactEquals: () => (/* binding */ exactEquals),\n/* harmony export */   floor: () => (/* binding */ floor),\n/* harmony export */   forEach: () => (/* binding */ forEach),\n/* harmony export */   fromValues: () => (/* binding */ fromValues),\n/* harmony export */   hermite: () => (/* binding */ hermite),\n/* harmony export */   inverse: () => (/* binding */ inverse),\n/* harmony export */   len: () => (/* binding */ len),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lerp: () => (/* binding */ lerp),\n/* harmony export */   max: () => (/* binding */ max),\n/* harmony export */   min: () => (/* binding */ min),\n/* harmony export */   mul: () => (/* binding */ mul),\n/* harmony export */   multiply: () => (/* binding */ multiply),\n/* harmony export */   negate: () => (/* binding */ negate),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   rotateX: () => (/* binding */ rotateX),\n/* harmony export */   rotateY: () => (/* binding */ rotateY),\n/* harmony export */   rotateZ: () => (/* binding */ rotateZ),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   scaleAndAdd: () => (/* binding */ scaleAndAdd),\n/* harmony export */   set: () => (/* binding */ set),\n/* harmony export */   sqrDist: () => (/* binding */ sqrDist),\n/* harmony export */   sqrLen: () => (/* binding */ sqrLen),\n/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),\n/* harmony export */   squaredLength: () => (/* binding */ squaredLength),\n/* harmony export */   str: () => (/* binding */ str),\n/* harmony export */   sub: () => (/* binding */ sub),\n/* harmony export */   subtract: () => (/* binding */ subtract),\n/* harmony export */   transformMat3: () => (/* binding */ transformMat3),\n/* harmony export */   transformMat4: () => (/* binding */ transformMat4),\n/* harmony export */   transformQuat: () => (/* binding */ transformQuat),\n/* harmony export */   zero: () => (/* binding */ zero)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nfunction fromValues(x, y, z) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nfunction set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nfunction cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;\n  var z = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nfunction rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nfunction rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nfunction rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nfunction angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nfunction str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nvar sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nvar mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nvar div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nvar dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nvar sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nvar len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nvar sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();\n\n//# sourceURL=webpack://mars-raytracer/./node_modules/gl-matrix/esm/vec3.js?");

/***/ }),

/***/ "./src/constants/const.ts":
/*!********************************!*\
  !*** ./src/constants/const.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   F32: () => (/* binding */ F32),\n/* harmony export */   MAT4: () => (/* binding */ MAT4),\n/* harmony export */   VEC2: () => (/* binding */ VEC2),\n/* harmony export */   VEC3: () => (/* binding */ VEC3),\n/* harmony export */   VERTEX: () => (/* binding */ VERTEX),\n/* harmony export */   VERTEX_ELEMENT_COUNT: () => (/* binding */ VERTEX_ELEMENT_COUNT)\n/* harmony export */ });\nconst F32 = 4;\nconst VERTEX_ELEMENT_COUNT = 5;\nconst VERTEX = F32 * VERTEX_ELEMENT_COUNT;\nconst MAT4 = 64;\nconst VEC2 = 8;\nconst VEC3 = 12;\n\n\n//# sourceURL=webpack://mars-raytracer/./src/constants/const.ts?");

/***/ }),

/***/ "./src/control/app.ts":
/*!****************************!*\
  !*** ./src/control/app.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   App: () => (/* binding */ App)\n/* harmony export */ });\n/* harmony import */ var _view_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/renderer */ \"./src/view/renderer.ts\");\n/* harmony import */ var _input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./input */ \"./src/control/input.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _App_instances, _App_drawEnd, _App_canvas, _App_renderer, _App_running, _App_start;\n\n\nconst message = document.getElementById(\"comp-label\");\nconst meshCount = document.getElementById(\"mesh-count\");\nconst gpuTime = document.getElementById(\"gpu-time\");\nconst cpuTime = document.getElementById(\"cpu-time\");\nconst bounces = document.getElementById(\"bounce\");\nconst bounceLabel = document.getElementById(\"bounce-count\");\nconst enableBVH = document.getElementById(\"bvh\");\nclass App {\n    constructor(canvas) {\n        _App_instances.add(this);\n        _App_canvas.set(this, void 0);\n        _App_renderer.set(this, void 0);\n        _App_running.set(this, true);\n        //temp\n        _App_start.set(this, void 0);\n        __classPrivateFieldSet(this, _App_canvas, canvas, \"f\");\n        __classPrivateFieldSet(this, _App_renderer, new _view_renderer__WEBPACK_IMPORTED_MODULE_0__.Renderer(canvas, __classPrivateFieldGet(this, _App_instances, \"m\", _App_drawEnd).bind(this)), \"f\");\n        (0,_input__WEBPACK_IMPORTED_MODULE_1__.InitInput)();\n        __classPrivateFieldGet(this, _App_canvas, \"f\").onclick = () => {\n            __classPrivateFieldGet(this, _App_canvas, \"f\").requestPointerLock();\n        };\n        enableBVH.onclick = () => {\n            __classPrivateFieldGet(this, _App_renderer, \"f\").enableBVH = Number(!__classPrivateFieldGet(this, _App_renderer, \"f\").enableBVH).valueOf();\n        };\n        bounces.onclick = () => {\n            __classPrivateFieldGet(this, _App_renderer, \"f\").maxBounces = Number(bounces.value);\n            bounceLabel.innerText = bounces.value;\n        };\n    }\n    Init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!(yield __classPrivateFieldGet(this, _App_renderer, \"f\").InitDevices())) {\n                message.innerText = \"WebGPU not supported!!\";\n                return -1;\n            }\n            if (this.scene)\n                __classPrivateFieldGet(this, _App_renderer, \"f\").submitScene(this.scene);\n            yield __classPrivateFieldGet(this, _App_renderer, \"f\").InitAssets();\n            __classPrivateFieldGet(this, _App_renderer, \"f\").InitPipeline();\n        });\n    }\n    Run() {\n        var _a;\n        const start = performance.now();\n        (_a = this.scene) === null || _a === void 0 ? void 0 : _a.onUpdate();\n        meshCount.innerText = `Mesh Count: ${this.scene.Mesh.length}`;\n        const end = performance.now();\n        cpuTime.innerText = `CPUTime: ${(end - start).toFixed(2)} ms`;\n        __classPrivateFieldSet(this, _App_start, performance.now(), \"f\");\n        __classPrivateFieldGet(this, _App_renderer, \"f\").Draw();\n    }\n    set Running(value) {\n        if (value)\n            requestAnimationFrame(this.Run);\n        __classPrivateFieldSet(this, _App_running, value, \"f\");\n    }\n    get Running() { return __classPrivateFieldGet(this, _App_running, \"f\"); }\n}\n_App_canvas = new WeakMap(), _App_renderer = new WeakMap(), _App_running = new WeakMap(), _App_start = new WeakMap(), _App_instances = new WeakSet(), _App_drawEnd = function _App_drawEnd() {\n    var end = performance.now();\n    gpuTime.innerText = `GPUTime: ${(end - __classPrivateFieldGet(this, _App_start, \"f\")).toFixed(2)} ms`;\n    if (__classPrivateFieldGet(this, _App_running, \"f\"))\n        requestAnimationFrame(this.Run.bind(this));\n};\n\n\n//# sourceURL=webpack://mars-raytracer/./src/control/app.ts?");

/***/ }),

/***/ "./src/control/input.ts":
/*!******************************!*\
  !*** ./src/control/input.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DOMMouseInput: () => (/* binding */ DOMMouseInput),\n/* harmony export */   GetInput: () => (/* binding */ GetInput),\n/* harmony export */   InitInput: () => (/* binding */ InitInput),\n/* harmony export */   isKeyPressed: () => (/* binding */ isKeyPressed),\n/* harmony export */   isMousePressed: () => (/* binding */ isMousePressed),\n/* harmony export */   onKeyDown: () => (/* binding */ onKeyDown),\n/* harmony export */   onKeyUp: () => (/* binding */ onKeyUp),\n/* harmony export */   onMouseButtonDown: () => (/* binding */ onMouseButtonDown),\n/* harmony export */   onMouseButtonUp: () => (/* binding */ onMouseButtonUp),\n/* harmony export */   onMouseMove: () => (/* binding */ onMouseMove)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Input_mousePollingRate, _Input___intervalID__, _Input_mousePos, _Input_mousePrevPos, _Input_mouseDelta, _DOMMouseInput_onMouseMove, _DOMMouseInput_mousePos, _DOMMouseInput_dom;\nfunction InitInput() { GInput = new Input; }\nfunction GetInput() { return GInput; }\nfunction onKeyDown(callback) { GInput.onKeyDown.push(callback); }\nfunction onKeyUp(callback) { GInput.onKeyUp.push(callback); }\nfunction isKeyPressed(keycode) { return GInput.keysDown.has(keycode); }\nfunction onMouseMove(callback) { GInput.onMouseMove.push(callback); }\nfunction onMouseButtonDown(callback) { GInput.onMouseButtonDown.push(callback); }\nfunction onMouseButtonUp(callback) { GInput.onMouseButtonUp.push(callback); }\nfunction isMousePressed(mousecode) { return GInput.mouseDown.has(mousecode); }\nvar GInput;\nclass Input {\n    constructor() {\n        _Input_mousePollingRate.set(this, void 0);\n        _Input___intervalID__.set(this, void 0); // need fix!!;\n        _Input_mousePos.set(this, void 0);\n        _Input_mousePrevPos.set(this, void 0);\n        _Input_mouseDelta.set(this, void 0);\n        if (GInput) {\n            console.error(\"Input has already been initialized.\");\n            return;\n        }\n        this.onKeyDown = [];\n        this.onKeyUp = [];\n        this.onMouseMove = [];\n        this.onMouseButtonDown = [];\n        this.onMouseButtonUp = [];\n        this.keysDown = new Set;\n        this.mouseDown = new Set;\n        __classPrivateFieldSet(this, _Input_mousePos, [0, 0], \"f\");\n        __classPrivateFieldSet(this, _Input_mousePrevPos, [0, 0], \"f\");\n        __classPrivateFieldSet(this, _Input_mouseDelta, [0, 0], \"f\");\n        document.addEventListener(\"keydown\", (event) => __awaiter(this, void 0, void 0, function* () {\n            this.keysDown.add(event.code);\n            this.onKeyDown.forEach((item) => __awaiter(this, void 0, void 0, function* () { return yield item(event); }));\n        }));\n        document.addEventListener(\"keyup\", (event) => __awaiter(this, void 0, void 0, function* () {\n            this.keysDown.delete(event.code);\n            this.onKeyUp.forEach((item) => __awaiter(this, void 0, void 0, function* () { return yield item(event); }));\n        }));\n        document.addEventListener(\"mousemove\", event => {\n            __classPrivateFieldSet(this, _Input_mousePos, [event.clientX, event.clientY], \"f\");\n            this.onMouseMove.forEach((item) => __awaiter(this, void 0, void 0, function* () { return item(event); }));\n        });\n        document.addEventListener(\"mousedown\", (event) => __awaiter(this, void 0, void 0, function* () {\n            this.mouseDown.add(event.button);\n            this.onMouseButtonDown.forEach((item) => __awaiter(this, void 0, void 0, function* () { return item(event); }));\n        }));\n        document.addEventListener(\"mouseup\", event => {\n            this.mouseDown.delete(event.button);\n            this.onMouseButtonUp.forEach((item) => __awaiter(this, void 0, void 0, function* () { return item(event); }));\n        });\n        __classPrivateFieldSet(this, _Input___intervalID__, setInterval(() => this.onUpdate(), 2), \"f\"); // 500Hz\n        GInput = this;\n    }\n    onUpdate() {\n        __classPrivateFieldGet(this, _Input_mouseDelta, \"f\")[0] = __classPrivateFieldGet(this, _Input_mousePos, \"f\")[0] - __classPrivateFieldGet(this, _Input_mousePrevPos, \"f\")[0];\n        __classPrivateFieldGet(this, _Input_mouseDelta, \"f\")[1] = __classPrivateFieldGet(this, _Input_mousePos, \"f\")[1] - __classPrivateFieldGet(this, _Input_mousePrevPos, \"f\")[1];\n        __classPrivateFieldSet(this, _Input_mousePrevPos, this.MousePosition, \"f\");\n    }\n    set pollingRate(rate) {\n        clearInterval(__classPrivateFieldGet(this, _Input___intervalID__, \"f\"));\n        __classPrivateFieldSet(this, _Input___intervalID__, setInterval(() => this.onUpdate(), 1 / rate * 1000), \"f\");\n        __classPrivateFieldSet(this, _Input_mousePollingRate, rate, \"f\");\n    } // converts to ms\n    get MousePosition() { return __classPrivateFieldGet(this, _Input_mousePos, \"f\"); }\n    get MouseDelta() { return __classPrivateFieldGet(this, _Input_mouseDelta, \"f\"); }\n    get PollingRate() { return __classPrivateFieldGet(this, _Input_mousePollingRate, \"f\"); }\n}\n_Input_mousePollingRate = new WeakMap(), _Input___intervalID__ = new WeakMap(), _Input_mousePos = new WeakMap(), _Input_mousePrevPos = new WeakMap(), _Input_mouseDelta = new WeakMap();\nclass DOMMouseInput {\n    constructor(element) {\n        _DOMMouseInput_onMouseMove.set(this, void 0);\n        _DOMMouseInput_mousePos.set(this, void 0);\n        _DOMMouseInput_dom.set(this, void 0);\n        __classPrivateFieldSet(this, _DOMMouseInput_dom, element, \"f\");\n        __classPrivateFieldSet(this, _DOMMouseInput_onMouseMove, [], \"f\");\n        __classPrivateFieldSet(this, _DOMMouseInput_mousePos, [0, 0], \"f\");\n        __classPrivateFieldGet(this, _DOMMouseInput_dom, \"f\").addEventListener(\"mousemove\", event => {\n            if (this.isPointerLocked()) {\n                __classPrivateFieldSet(this, _DOMMouseInput_mousePos, [event.clientX, event.clientY], \"f\");\n                __classPrivateFieldGet(this, _DOMMouseInput_onMouseMove, \"f\").forEach((item) => __awaiter(this, void 0, void 0, function* () { return item(event); }));\n            }\n        });\n    }\n    onMouseMove(callback) { __classPrivateFieldGet(this, _DOMMouseInput_onMouseMove, \"f\").push(callback); }\n    isPointerLocked() { return __classPrivateFieldGet(this, _DOMMouseInput_dom, \"f\") === document.pointerLockElement; }\n    get MousePosition() { return __classPrivateFieldGet(this, _DOMMouseInput_mousePos, \"f\"); }\n}\n_DOMMouseInput_onMouseMove = new WeakMap(), _DOMMouseInput_mousePos = new WeakMap(), _DOMMouseInput_dom = new WeakMap();\n\n\n//# sourceURL=webpack://mars-raytracer/./src/control/input.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _control_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./control/app */ \"./src/control/app.ts\");\n/* harmony import */ var _model_scene__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./model/scene */ \"./src/model/scene.ts\");\n\n\nconst canvas = document.getElementById(\"gfx-main\");\nconst app = new _control_app__WEBPACK_IMPORTED_MODULE_0__.App(canvas);\napp.scene = new _model_scene__WEBPACK_IMPORTED_MODULE_1__.Scene;\napp.Init().then((res) => {\n    if (res)\n        return -1;\n    app.Run();\n});\n\n\n//# sourceURL=webpack://mars-raytracer/./src/main.ts?");

/***/ }),

/***/ "./src/model/camera.ts":
/*!*****************************!*\
  !*** ./src/model/camera.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Camera: () => (/* binding */ Camera)\n/* harmony export */ });\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/mat4.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec3.js\");\n/* harmony import */ var _math_stuffs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math_stuffs */ \"./src/model/math_stuffs.ts\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Camera_instances, _Camera_calcViewMat, _Camera_position, _Camera_rotation, _Camera_forwards, _Camera_right, _Camera_up, _Camera_View;\n\n\nclass Camera {\n    constructor(pos, phi, theta) {\n        _Camera_instances.add(this);\n        _Camera_position.set(this, void 0);\n        _Camera_rotation.set(this, void 0);\n        _Camera_forwards.set(this, void 0);\n        _Camera_right.set(this, void 0);\n        _Camera_up.set(this, void 0);\n        _Camera_View.set(this, void 0);\n        __classPrivateFieldSet(this, _Camera_View, gl_matrix__WEBPACK_IMPORTED_MODULE_1__.create(), \"f\");\n        __classPrivateFieldSet(this, _Camera_position, pos, \"f\");\n        __classPrivateFieldSet(this, _Camera_rotation, [0, phi ? phi : 0, theta ? theta : 0], \"f\");\n        __classPrivateFieldSet(this, _Camera_forwards, gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create(), \"f\");\n        __classPrivateFieldSet(this, _Camera_up, gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create(), \"f\");\n        __classPrivateFieldSet(this, _Camera_right, gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create(), \"f\");\n        __classPrivateFieldGet(this, _Camera_instances, \"m\", _Camera_calcViewMat).call(this);\n    }\n    rotate(degree, axis) {\n        if (axis[0] > 0)\n            __classPrivateFieldGet(this, _Camera_rotation, \"f\")[0] += degree;\n        if (axis[1] > 0)\n            __classPrivateFieldGet(this, _Camera_rotation, \"f\")[1] += degree;\n        if (axis[2] > 0)\n            __classPrivateFieldGet(this, _Camera_rotation, \"f\")[2] += degree;\n        __classPrivateFieldGet(this, _Camera_instances, \"m\", _Camera_calcViewMat).call(this);\n    }\n    translate(pos) {\n        __classPrivateFieldGet(this, _Camera_position, \"f\")[0] += pos[0];\n        __classPrivateFieldGet(this, _Camera_position, \"f\")[1] += pos[1];\n        __classPrivateFieldGet(this, _Camera_position, \"f\")[2] += pos[2];\n        __classPrivateFieldGet(this, _Camera_instances, \"m\", _Camera_calcViewMat).call(this);\n    }\n    spin(dX, dY) {\n        __classPrivateFieldGet(this, _Camera_rotation, \"f\")[2] -= dX;\n        __classPrivateFieldGet(this, _Camera_rotation, \"f\")[2] %= 360;\n        __classPrivateFieldGet(this, _Camera_rotation, \"f\")[1] = Math.min(89, Math.max(-89, __classPrivateFieldGet(this, _Camera_rotation, \"f\")[1] + dY));\n        __classPrivateFieldGet(this, _Camera_instances, \"m\", _Camera_calcViewMat).call(this);\n    }\n    move(forward, right) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.scaleAndAdd(__classPrivateFieldGet(this, _Camera_position, \"f\"), __classPrivateFieldGet(this, _Camera_position, \"f\"), __classPrivateFieldGet(this, _Camera_forwards, \"f\"), forward);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_2__.scaleAndAdd(__classPrivateFieldGet(this, _Camera_position, \"f\"), __classPrivateFieldGet(this, _Camera_position, \"f\"), __classPrivateFieldGet(this, _Camera_right, \"f\"), right);\n        __classPrivateFieldGet(this, _Camera_instances, \"m\", _Camera_calcViewMat).call(this);\n    }\n    get ViewData() { return __classPrivateFieldGet(this, _Camera_View, \"f\"); }\n    get Position() { return __classPrivateFieldGet(this, _Camera_position, \"f\"); }\n    get Rotation() { return __classPrivateFieldGet(this, _Camera_rotation, \"f\"); }\n    get Forward() { return __classPrivateFieldGet(this, _Camera_forwards, \"f\"); }\n    get Right() { return __classPrivateFieldGet(this, _Camera_right, \"f\"); }\n    get Up() { return __classPrivateFieldGet(this, _Camera_up, \"f\"); }\n}\n_Camera_position = new WeakMap(), _Camera_rotation = new WeakMap(), _Camera_forwards = new WeakMap(), _Camera_right = new WeakMap(), _Camera_up = new WeakMap(), _Camera_View = new WeakMap(), _Camera_instances = new WeakSet(), _Camera_calcViewMat = function _Camera_calcViewMat() {\n    __classPrivateFieldSet(this, _Camera_forwards, [\n        Math.cos((0,_math_stuffs__WEBPACK_IMPORTED_MODULE_0__.Deg2Rad)(__classPrivateFieldGet(this, _Camera_rotation, \"f\")[2])) * Math.cos((0,_math_stuffs__WEBPACK_IMPORTED_MODULE_0__.Deg2Rad)(__classPrivateFieldGet(this, _Camera_rotation, \"f\")[1])),\n        Math.sin((0,_math_stuffs__WEBPACK_IMPORTED_MODULE_0__.Deg2Rad)(__classPrivateFieldGet(this, _Camera_rotation, \"f\")[2])) * Math.cos((0,_math_stuffs__WEBPACK_IMPORTED_MODULE_0__.Deg2Rad)(__classPrivateFieldGet(this, _Camera_rotation, \"f\")[1])),\n        Math.sin((0,_math_stuffs__WEBPACK_IMPORTED_MODULE_0__.Deg2Rad)(__classPrivateFieldGet(this, _Camera_rotation, \"f\")[1]))\n    ], \"f\");\n    gl_matrix__WEBPACK_IMPORTED_MODULE_2__.cross(__classPrivateFieldGet(this, _Camera_right, \"f\"), __classPrivateFieldGet(this, _Camera_forwards, \"f\"), [0, 0, 1]);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_2__.cross(__classPrivateFieldGet(this, _Camera_up, \"f\"), __classPrivateFieldGet(this, _Camera_right, \"f\"), __classPrivateFieldGet(this, _Camera_forwards, \"f\"));\n    var target = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create();\n    gl_matrix__WEBPACK_IMPORTED_MODULE_2__.add(target, __classPrivateFieldGet(this, _Camera_position, \"f\"), __classPrivateFieldGet(this, _Camera_forwards, \"f\"));\n    gl_matrix__WEBPACK_IMPORTED_MODULE_1__.lookAt(__classPrivateFieldGet(this, _Camera_View, \"f\"), __classPrivateFieldGet(this, _Camera_position, \"f\"), target, __classPrivateFieldGet(this, _Camera_up, \"f\"));\n};\n\n\n//# sourceURL=webpack://mars-raytracer/./src/model/camera.ts?");

/***/ }),

/***/ "./src/model/math_stuffs.ts":
/*!**********************************!*\
  !*** ./src/model/math_stuffs.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deg2Rad: () => (/* binding */ Deg2Rad)\n/* harmony export */ });\nfunction Deg2Rad(degree) {\n    return degree * Math.PI / 180;\n}\n\n\n//# sourceURL=webpack://mars-raytracer/./src/model/math_stuffs.ts?");

/***/ }),

/***/ "./src/model/mesh.ts":
/*!***************************!*\
  !*** ./src/model/mesh.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mesh: () => (/* binding */ Mesh),\n/* harmony export */   OBJLoader: () => (/* binding */ OBJLoader)\n/* harmony export */ });\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec3.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec2.js\");\n/* harmony import */ var _view_material__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../view/material */ \"./src/view/material.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Mesh_model, _Mesh_vertex, _Mesh_material, _Mesh_name;\n\n\nclass Mesh {\n    constructor(vertexData, material, name) {\n        _Mesh_model.set(this, void 0);\n        _Mesh_vertex.set(this, void 0);\n        _Mesh_material.set(this, void 0);\n        _Mesh_name.set(this, void 0);\n        __classPrivateFieldSet(this, _Mesh_vertex, vertexData, \"f\");\n        __classPrivateFieldSet(this, _Mesh_material, material, \"f\");\n        if (name)\n            __classPrivateFieldSet(this, _Mesh_name, name, \"f\");\n    }\n    Init(modelData) {\n        __classPrivateFieldSet(this, _Mesh_model, modelData, \"f\");\n    }\n    set Model(modeldata) { __classPrivateFieldSet(this, _Mesh_model, modeldata, \"f\"); }\n    get Model() { return __classPrivateFieldGet(this, _Mesh_model, \"f\"); }\n    get VertexData() { return __classPrivateFieldGet(this, _Mesh_vertex, \"f\"); }\n    get Material() { return __classPrivateFieldGet(this, _Mesh_material, \"f\"); }\n}\n_Mesh_model = new WeakMap(), _Mesh_vertex = new WeakMap(), _Mesh_material = new WeakMap(), _Mesh_name = new WeakMap();\nfunction OBJLoader(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n        //fetching OBJ file\n        const response = yield fetch(url);\n        const blob = yield response.blob();\n        const data = yield blob.text();\n        // Pharsing vertex and texture coords and splitting faces\n        const nameRegex = /o\\s[a-z]+/;\n        const vertexRegex = /v\\s(-?\\d+\\.\\d+)\\s(-?\\d+\\.\\d+)\\s(-?\\d+\\.\\d+)/;\n        const textcoordRegex = /vt\\s(\\d+\\.\\d+)\\s(\\d+\\.\\d+)/;\n        const faceRegex = /f\\s(\\d+\\/\\d+\\/\\d+\\s?)+/;\n        let name = \"\";\n        const vertices = [];\n        const texcoords = [];\n        const output = [];\n        const lines = data.split(\"\\n\");\n        let lines_read = 0;\n        let meshFound = false;\n        const prog = setInterval(() => {\n            const progress = lines_read / lines.length * 100;\n            console.log(progress);\n            if (progress == 100)\n                clearInterval(prog);\n        }, 500);\n        for (let index = 0; index < lines.length; index++) {\n            const line = lines[index];\n            lines_read++;\n            const vertexResult = vertexRegex.exec(line);\n            if (vertexResult) {\n                const vertex = gl_matrix__WEBPACK_IMPORTED_MODULE_1__.create();\n                let i = 0;\n                vertexResult[0]\n                    .split(\" \")\n                    .splice(1, 3).forEach(num => vertex[i++] = Number(num).valueOf());\n                vertices.push(vertex);\n                continue;\n            }\n            const texcoordResult = textcoordRegex.exec(line);\n            if (texcoordResult) {\n                const textcoord = gl_matrix__WEBPACK_IMPORTED_MODULE_2__.create();\n                let i = 0;\n                texcoordResult[0]\n                    .split(\" \")\n                    .splice(1, 2).forEach(num => textcoord[i++] = Number(num).valueOf());\n                texcoords.push(textcoord);\n                continue;\n            }\n            const faceResult = faceRegex.exec(line);\n            if (faceResult) {\n                const faceContents = faceResult[0]\n                    .split(\" \")\n                    .splice(1);\n                const triangleCount = faceContents.length - 2;\n                let output_index = 0;\n                // Will be replaced with index based method\n                const fun = (v_tc_vn) => {\n                    output.push(vertices[Number(v_tc_vn[0]).valueOf() - 1][0]); //x\n                    output.push(vertices[Number(v_tc_vn[0]).valueOf() - 1][1]); //y\n                    output.push(vertices[Number(v_tc_vn[0]).valueOf() - 1][2]); //z\n                    output.push(texcoords[Number(v_tc_vn[1]).valueOf() - 1][0]); //tcx\n                    output.push(texcoords[Number(v_tc_vn[1]).valueOf() - 1][1]); //tcy\n                };\n                for (let i = 0; i < triangleCount; i++) {\n                    const v_tc_vn1 = faceContents[0].split(\"/\");\n                    const v_tc_vn2 = faceContents[i + 1].split(\"/\");\n                    const v_tc_vn3 = faceContents[i + 2].split(\"/\");\n                    fun(v_tc_vn1);\n                    fun(v_tc_vn2);\n                    fun(v_tc_vn3);\n                }\n            }\n        }\n        ;\n        const buffer = new Float32Array(output.length);\n        buffer.set(output);\n        return new Mesh(buffer, new _view_material__WEBPACK_IMPORTED_MODULE_0__.Material(\"dist/img/sasuke.png\"), name);\n    });\n}\n\n\n//# sourceURL=webpack://mars-raytracer/./src/model/mesh.ts?");

/***/ }),

/***/ "./src/model/modifiers/mesh_modifiers.ts":
/*!***********************************************!*\
  !*** ./src/model/modifiers/mesh_modifiers.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MeshModifier: () => (/* binding */ MeshModifier)\n/* harmony export */ });\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/mat4.js\");\n/* harmony import */ var _math_stuffs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math_stuffs */ \"./src/model/math_stuffs.ts\");\n\n\nclass MeshModifier {\n    rotate(mesh, degree, axis) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.rotate(mesh.Model, mesh.Model, (0,_math_stuffs__WEBPACK_IMPORTED_MODULE_0__.Deg2Rad)(degree), axis);\n    }\n    translate(mesh, pos) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_1__.translate(mesh.Model, mesh.Model, pos);\n    }\n}\n\n\n//# sourceURL=webpack://mars-raytracer/./src/model/modifiers/mesh_modifiers.ts?");

/***/ }),

/***/ "./src/model/scene.ts":
/*!****************************!*\
  !*** ./src/model/scene.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Scene: () => (/* binding */ Scene)\n/* harmony export */ });\n/* harmony import */ var _camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./camera */ \"./src/model/camera.ts\");\n/* harmony import */ var _control_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../control/input */ \"./src/control/input.ts\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/mat4.js\");\n/* harmony import */ var _constants_const__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/const */ \"./src/constants/const.ts\");\n/* harmony import */ var _modifiers_mesh_modifiers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modifiers/mesh_modifiers */ \"./src/model/modifiers/mesh_modifiers.ts\");\n/* harmony import */ var _sphere__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sphere */ \"./src/model/sphere.ts\");\n/* harmony import */ var _view_BHV__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../view/BHV */ \"./src/view/BHV.ts\");\n/* harmony import */ var _view_CubeMaps__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../view/CubeMaps */ \"./src/view/CubeMaps.ts\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Scene_meshes, _Scene_meshModifier, _Scene_player, _Scene_vertexCount, _Scene_modelDatas, _Scene_canvasInput;\n\n\n\n\n\n\n\n\nclass Scene {\n    constructor() {\n        _Scene_meshes.set(this, void 0);\n        _Scene_meshModifier.set(this, void 0);\n        _Scene_player.set(this, void 0);\n        _Scene_vertexCount.set(this, void 0);\n        _Scene_modelDatas.set(this, void 0);\n        _Scene_canvasInput.set(this, void 0);\n        __classPrivateFieldSet(this, _Scene_meshes, [], \"f\");\n        __classPrivateFieldSet(this, _Scene_modelDatas, new Float32Array(1024 * _constants_const__WEBPACK_IMPORTED_MODULE_2__.MAT4 / _constants_const__WEBPACK_IMPORTED_MODULE_2__.F32), \"f\");\n        __classPrivateFieldSet(this, _Scene_player, new _camera__WEBPACK_IMPORTED_MODULE_0__.Camera([0.75, 1.0, 0.25]), \"f\");\n        __classPrivateFieldSet(this, _Scene_meshModifier, new _modifiers_mesh_modifiers__WEBPACK_IMPORTED_MODULE_3__.MeshModifier(), \"f\");\n        __classPrivateFieldSet(this, _Scene_vertexCount, 0, \"f\");\n        for (let i = 0; i < 128; i++) {\n            this.pushMesh(new _sphere__WEBPACK_IMPORTED_MODULE_4__.Sphere((Math.random() * 3) + 1, [\n                (Math.random() * 30) - 15,\n                (Math.random() * 30) - 15,\n                (Math.random() * 30) - 15,\n            ], [\n                (Math.random()),\n                (Math.random()),\n                (Math.random()),\n            ]));\n        }\n        // need fix\n        __classPrivateFieldSet(this, _Scene_canvasInput, new _control_input__WEBPACK_IMPORTED_MODULE_1__.DOMMouseInput(document.getElementById(\"gfx-main\")), \"f\");\n        __classPrivateFieldGet(this, _Scene_canvasInput, \"f\").onMouseMove((event) => {\n            __classPrivateFieldGet(this, _Scene_player, \"f\").spin(event.movementX * 0.01, event.movementY * 0.01);\n            return true;\n        });\n        this.bvh = new _view_BHV__WEBPACK_IMPORTED_MODULE_5__.BVH;\n        this.bvh.BuildBVH(__classPrivateFieldGet(this, _Scene_meshes, \"f\"));\n        this.cubeMap = new _view_CubeMaps__WEBPACK_IMPORTED_MODULE_6__.CubeMapTexture([\n            \"dist\\\\img\\\\sky\\\\posz.jpg\",\n            \"dist\\\\img\\\\sky\\\\negz.jpg\",\n            \"dist\\\\img\\\\sky\\\\negx.jpg\",\n            \"dist\\\\img\\\\sky\\\\posx.jpg\",\n            \"dist\\\\img\\\\sky\\\\negy.jpg\",\n            \"dist\\\\img\\\\sky\\\\posy.jpg\",\n        ]);\n    }\n    onUpdate() {\n        if ((0,_control_input__WEBPACK_IMPORTED_MODULE_1__.isKeyPressed)(\"KeyA\"))\n            __classPrivateFieldGet(this, _Scene_player, \"f\").move(0, -0.3);\n        if ((0,_control_input__WEBPACK_IMPORTED_MODULE_1__.isKeyPressed)(\"KeyD\"))\n            __classPrivateFieldGet(this, _Scene_player, \"f\").move(0, 0.3);\n        if ((0,_control_input__WEBPACK_IMPORTED_MODULE_1__.isKeyPressed)(\"KeyS\"))\n            __classPrivateFieldGet(this, _Scene_player, \"f\").move(-0.3, 0);\n        if ((0,_control_input__WEBPACK_IMPORTED_MODULE_1__.isKeyPressed)(\"KeyW\"))\n            __classPrivateFieldGet(this, _Scene_player, \"f\").move(0.3, 0);\n        if ((0,_control_input__WEBPACK_IMPORTED_MODULE_1__.isKeyPressed)(\"KeyE\"))\n            __classPrivateFieldGet(this, _Scene_meshes, \"f\").forEach(item => __classPrivateFieldGet(this, _Scene_meshModifier, \"f\").rotate(item, 5, [0, 0, 1]));\n        if ((0,_control_input__WEBPACK_IMPORTED_MODULE_1__.isKeyPressed)(\"KeyQ\"))\n            __classPrivateFieldGet(this, _Scene_meshes, \"f\").forEach(item => __classPrivateFieldGet(this, _Scene_meshModifier, \"f\").rotate(item, -5, [0, 0, 1]));\n    }\n    pushMesh(mesh) {\n        const model = __classPrivateFieldGet(this, _Scene_modelDatas, \"f\").subarray(__classPrivateFieldGet(this, _Scene_meshes, \"f\").length * _constants_const__WEBPACK_IMPORTED_MODULE_2__.MAT4 / _constants_const__WEBPACK_IMPORTED_MODULE_2__.F32, (__classPrivateFieldGet(this, _Scene_meshes, \"f\").length + 1) * _constants_const__WEBPACK_IMPORTED_MODULE_2__.MAT4 / _constants_const__WEBPACK_IMPORTED_MODULE_2__.F32);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_7__.identity(model);\n        mesh.Init(model);\n        __classPrivateFieldSet(this, _Scene_vertexCount, __classPrivateFieldGet(this, _Scene_vertexCount, \"f\") + mesh.VertexData.length, \"f\");\n        __classPrivateFieldGet(this, _Scene_meshes, \"f\").push(mesh);\n    }\n    getMeshPushed() { return __classPrivateFieldGet(this, _Scene_meshes, \"f\"); }\n    get Player() { return __classPrivateFieldGet(this, _Scene_player, \"f\"); }\n    get Mesh() { return __classPrivateFieldGet(this, _Scene_meshes, \"f\"); }\n    get ModelDatas() { return __classPrivateFieldGet(this, _Scene_modelDatas, \"f\"); }\n    get VertexCount() { return __classPrivateFieldGet(this, _Scene_vertexCount, \"f\"); }\n}\n_Scene_meshes = new WeakMap(), _Scene_meshModifier = new WeakMap(), _Scene_player = new WeakMap(), _Scene_vertexCount = new WeakMap(), _Scene_modelDatas = new WeakMap(), _Scene_canvasInput = new WeakMap();\n\n\n//# sourceURL=webpack://mars-raytracer/./src/model/scene.ts?");

/***/ }),

/***/ "./src/model/sphere.ts":
/*!*****************************!*\
  !*** ./src/model/sphere.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sphere: () => (/* binding */ Sphere)\n/* harmony export */ });\n/* harmony import */ var _mesh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mesh */ \"./src/model/mesh.ts\");\n/* harmony import */ var _view_material__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../view/material */ \"./src/view/material.ts\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Sphere_position, _Sphere_radius, _Sphere_color;\n\n\nclass Sphere extends _mesh__WEBPACK_IMPORTED_MODULE_0__.Mesh {\n    constructor(raduis, position, color) {\n        const vertex = new Float32Array([\n            position ? position[0] : 0.0,\n            position ? position[1] : 0.0,\n            position ? position[2] : 0.0,\n            color ? color[0] : 0.5,\n            color ? color[1] : 0.5,\n            color ? color[2] : 0.5,\n            raduis ? raduis : 1\n        ]);\n        super(vertex, new _view_material__WEBPACK_IMPORTED_MODULE_1__.Material(\"\", color));\n        _Sphere_position.set(this, void 0);\n        _Sphere_radius.set(this, void 0);\n        _Sphere_color.set(this, void 0);\n        __classPrivateFieldSet(this, _Sphere_position, vertex.subarray(0, 3), \"f\");\n        __classPrivateFieldSet(this, _Sphere_color, vertex.subarray(3, 6), \"f\");\n        __classPrivateFieldSet(this, _Sphere_radius, vertex.subarray(6, 7), \"f\");\n    }\n    get center() { return __classPrivateFieldGet(this, _Sphere_position, \"f\"); }\n    get radius() { return __classPrivateFieldGet(this, _Sphere_radius, \"f\")[0]; }\n    get color() { return __classPrivateFieldGet(this, _Sphere_color, \"f\"); }\n}\n_Sphere_position = new WeakMap(), _Sphere_radius = new WeakMap(), _Sphere_color = new WeakMap();\n\n\n//# sourceURL=webpack://mars-raytracer/./src/model/sphere.ts?");

/***/ }),

/***/ "./src/view/BHV.ts":
/*!*************************!*\
  !*** ./src/view/BHV.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BVH: () => (/* binding */ BVH)\n/* harmony export */ });\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec3.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _BVH_instances, _BVH_getNode, _BVH_meshes;\n\nconst NODECOUNT = 8;\n// Mapped class, makes life easier!!\nclass Node {\n    set minCorner(data) { new Float32Array(this.data.subarray(0, 3)).set(data); }\n    get minCorner() { return this.data.subarray(0, 3); }\n    set leftChild(data) { this.data.subarray(3, 4)[0] = data; }\n    get leftChild() { return this.data.subarray(3, 4)[0]; }\n    set maxCorner(data) { new Float32Array(this.data.subarray(4, 7)).set(data); }\n    get maxCorner() { return this.data.subarray(4, 7); }\n    set meshCount(data) { this.data.subarray(7, 8)[0] = data; }\n    get meshCount() { return this.data.subarray(7, 8)[0]; }\n}\nclass BVH {\n    constructor() {\n        _BVH_instances.add(this);\n        _BVH_meshes.set(this, void 0);\n    }\n    BuildBVH(meshes) {\n        this.nodesUsed = 0;\n        __classPrivateFieldSet(this, _BVH_meshes, meshes, \"f\");\n        this.meshIndices = new Float32Array(__classPrivateFieldGet(this, _BVH_meshes, \"f\").length);\n        for (let i = 0; i < this.meshIndices.length; i++) {\n            this.meshIndices[i] = i;\n        }\n        // theoretical max of 2n-1, node size (vec3 + number + vec3 + number)\n        this.storage = new Float32Array((2 * __classPrivateFieldGet(this, _BVH_meshes, \"f\").length - 1) * (3 + 1 + 3 + 1));\n        let root = __classPrivateFieldGet(this, _BVH_instances, \"m\", _BVH_getNode).call(this, 0);\n        root.leftChild = 0;\n        root.meshCount = __classPrivateFieldGet(this, _BVH_meshes, \"f\").length;\n        this.nodesUsed++;\n        this.updateBounds(0);\n        this.subdivide(0);\n    }\n    updateBounds(nodeIndex) {\n        let node = __classPrivateFieldGet(this, _BVH_instances, \"m\", _BVH_getNode).call(this, nodeIndex);\n        node.minCorner = [99999, 99999, 99999];\n        node.maxCorner = [-99999, -99999, -99999];\n        for (var i = 0; i < node.meshCount; i++) {\n            const sphere = __classPrivateFieldGet(this, _BVH_meshes, \"f\")[this.meshIndices[node.leftChild + i]];\n            const axis = [sphere.radius, sphere.radius, sphere.radius];\n            var temp = [0, 0, 0];\n            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.subtract(temp, sphere.center, axis);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.min(node.minCorner, node.minCorner, temp);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.add(temp, sphere.center, axis);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_0__.max(node.maxCorner, node.maxCorner, temp);\n        }\n    }\n    subdivide(nodeIndex) {\n        let node = __classPrivateFieldGet(this, _BVH_instances, \"m\", _BVH_getNode).call(this, nodeIndex);\n        if (node.meshCount <= 2)\n            return;\n        var extent = [0, 0, 0];\n        gl_matrix__WEBPACK_IMPORTED_MODULE_0__.subtract(extent, node.maxCorner, node.minCorner);\n        var axis = 0;\n        if (extent[1] > extent[axis]) {\n            axis = 1;\n        }\n        if (extent[2] > extent[axis]) {\n            axis = 2;\n        }\n        const splitPosition = node.minCorner[axis] + extent[axis] / 2;\n        var i = node.leftChild;\n        var j = i + node.meshCount - 1;\n        while (i <= j) {\n            if (__classPrivateFieldGet(this, _BVH_meshes, \"f\")[this.meshIndices[i]].center[axis] < splitPosition) {\n                i++;\n            }\n            else {\n                var temp = this.meshIndices[i];\n                this.meshIndices[i] = this.meshIndices[j];\n                this.meshIndices[j] = temp;\n                j--;\n            }\n        }\n        var leftCount = i - node.leftChild;\n        if (leftCount == 0 || leftCount == node.meshCount) {\n            return;\n        }\n        const leftChildIndex = this.nodesUsed;\n        this.nodesUsed += 1;\n        const rightChildIndex = this.nodesUsed;\n        this.nodesUsed += 1;\n        __classPrivateFieldGet(this, _BVH_instances, \"m\", _BVH_getNode).call(this, leftChildIndex).leftChild = node.leftChild;\n        __classPrivateFieldGet(this, _BVH_instances, \"m\", _BVH_getNode).call(this, leftChildIndex).meshCount = leftCount;\n        __classPrivateFieldGet(this, _BVH_instances, \"m\", _BVH_getNode).call(this, rightChildIndex).leftChild = i;\n        __classPrivateFieldGet(this, _BVH_instances, \"m\", _BVH_getNode).call(this, rightChildIndex).meshCount = node.meshCount - leftCount;\n        node.leftChild = leftChildIndex;\n        node.meshCount = 0;\n        this.updateBounds(leftChildIndex);\n        this.updateBounds(rightChildIndex);\n        this.subdivide(leftChildIndex);\n        this.subdivide(rightChildIndex);\n    }\n}\n_BVH_meshes = new WeakMap(), _BVH_instances = new WeakSet(), _BVH_getNode = function _BVH_getNode(nodeIndex) {\n    const offset = nodeIndex * NODECOUNT;\n    const res = new Node;\n    res.data = this.storage.subarray(offset, offset + 8);\n    return res;\n};\n\n\n//# sourceURL=webpack://mars-raytracer/./src/view/BHV.ts?");

/***/ }),

/***/ "./src/view/CubeMaps.ts":
/*!******************************!*\
  !*** ./src/view/CubeMaps.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CubeMapTexture: () => (/* binding */ CubeMapTexture)\n/* harmony export */ });\nclass CubeMapTexture {\n    constructor(urls) {\n        this.urls = urls;\n    }\n}\n\n\n//# sourceURL=webpack://mars-raytracer/./src/view/CubeMaps.ts?");

/***/ }),

/***/ "./src/view/material.ts":
/*!******************************!*\
  !*** ./src/view/material.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Material: () => (/* binding */ Material)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Material_instances, _Material_loadImageBitmap, _Material_texture, _Material_view, _Material_sampler, _Material_URL, _Material_color;\nclass Material {\n    constructor(textureURL, color) {\n        _Material_instances.add(this);\n        _Material_texture.set(this, void 0);\n        _Material_view.set(this, void 0);\n        _Material_sampler.set(this, void 0);\n        _Material_URL.set(this, void 0);\n        _Material_color.set(this, void 0);\n        __classPrivateFieldSet(this, _Material_URL, textureURL ? textureURL : \"\", \"f\");\n        __classPrivateFieldSet(this, _Material_color, color ? color : [0, 0, 0], \"f\");\n    }\n    Init(device) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield fetch(__classPrivateFieldGet(this, _Material_URL, \"f\"));\n            const blob = yield response.blob();\n            const imgBitmap = yield createImageBitmap(blob);\n            yield __classPrivateFieldGet(this, _Material_instances, \"m\", _Material_loadImageBitmap).call(this, device, imgBitmap);\n            const viewDes = {\n                format: \"rgba8unorm\",\n                dimension: \"2d\",\n                aspect: \"all\",\n                baseMipLevel: 0,\n                mipLevelCount: 1,\n                baseArrayLayer: 0,\n                arrayLayerCount: 1\n            };\n            __classPrivateFieldSet(this, _Material_view, __classPrivateFieldGet(this, _Material_texture, \"f\").createView(viewDes), \"f\");\n            const samplerDes = {\n                addressModeU: \"repeat\",\n                addressModeV: \"repeat\",\n                magFilter: \"linear\",\n                minFilter: \"linear\",\n                mipmapFilter: \"nearest\",\n                maxAnisotropy: 1\n            };\n            __classPrivateFieldSet(this, _Material_sampler, device.createSampler(samplerDes), \"f\");\n        });\n    }\n    get TextureView() { return __classPrivateFieldGet(this, _Material_view, \"f\"); }\n    get Sampler() { return __classPrivateFieldGet(this, _Material_sampler, \"f\"); }\n    get Color() { return __classPrivateFieldGet(this, _Material_color, \"f\"); }\n}\n_Material_texture = new WeakMap(), _Material_view = new WeakMap(), _Material_sampler = new WeakMap(), _Material_URL = new WeakMap(), _Material_color = new WeakMap(), _Material_instances = new WeakSet(), _Material_loadImageBitmap = function _Material_loadImageBitmap(device, imageData) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const textureDes = {\n            size: {\n                width: imageData.width,\n                height: imageData.height\n            },\n            format: \"rgba8unorm\",\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT\n        };\n        __classPrivateFieldSet(this, _Material_texture, device.createTexture(textureDes), \"f\");\n        device.queue.copyExternalImageToTexture({ source: imageData }, { texture: __classPrivateFieldGet(this, _Material_texture, \"f\") }, textureDes.size);\n    });\n};\n\n\n//# sourceURL=webpack://mars-raytracer/./src/view/material.ts?");

/***/ }),

/***/ "./src/view/renderer.ts":
/*!******************************!*\
  !*** ./src/view/renderer.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Renderer: () => (/* binding */ Renderer)\n/* harmony export */ });\n/* harmony import */ var _shaders_raytracing_kernel_wgsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shaders/raytracing_kernel.wgsl */ \"./src/view/shaders/raytracing_kernel.wgsl\");\n/* harmony import */ var _shaders_renderer_kernel_wgsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shaders/renderer_kernel.wgsl */ \"./src/view/shaders/renderer_kernel.wgsl\");\n/* harmony import */ var _constants_const__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/const */ \"./src/constants/const.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Renderer_instances, _Renderer_loadCubemap, _Renderer_passBuffers, _Renderer_device, _Renderer_adaptor, _Renderer_context, _Renderer_format, _Renderer_canvas, _Renderer_raytracing_pipeline, _Renderer_raytracing_bindgroup, _Renderer_rendering_pipeline, _Renderer_rendering_bindgroup, _Renderer_color_buffer, _Renderer_color_buffer_view, _Renderer_sampler, _Renderer_sceneUniform, _Renderer_vertexBuffer, _Renderer_nodeBuffer, _Renderer_meshIndexBuffer, _Renderer_cubeMapTexture, _Renderer_cubeMapTextureView, _Renderer_cubeMapSampler, _Renderer_scene, _Renderer_display, _Renderer_callback;\n\n\n\n//temp\nconst renderTime = document.getElementById(\"render-time\");\nclass Renderer {\n    constructor(canvas, drawend) {\n        _Renderer_instances.add(this);\n        //Device\n        _Renderer_device.set(this, void 0);\n        _Renderer_adaptor.set(this, void 0);\n        _Renderer_context.set(this, void 0);\n        _Renderer_format.set(this, void 0);\n        _Renderer_canvas.set(this, void 0);\n        //pipelines\n        _Renderer_raytracing_pipeline.set(this, void 0);\n        _Renderer_raytracing_bindgroup.set(this, void 0);\n        _Renderer_rendering_pipeline.set(this, void 0);\n        _Renderer_rendering_bindgroup.set(this, void 0);\n        //Assets\n        _Renderer_color_buffer.set(this, void 0);\n        _Renderer_color_buffer_view.set(this, void 0);\n        _Renderer_sampler.set(this, void 0);\n        _Renderer_sceneUniform.set(this, void 0);\n        _Renderer_vertexBuffer.set(this, void 0);\n        _Renderer_nodeBuffer.set(this, void 0);\n        _Renderer_meshIndexBuffer.set(this, void 0);\n        _Renderer_cubeMapTexture.set(this, void 0);\n        _Renderer_cubeMapTextureView.set(this, void 0);\n        _Renderer_cubeMapSampler.set(this, void 0);\n        _Renderer_scene.set(this, void 0);\n        _Renderer_display.set(this, void 0);\n        //TODO: Plan an event system to handle these events\n        _Renderer_callback.set(this, void 0);\n        __classPrivateFieldSet(this, _Renderer_canvas, canvas, \"f\");\n        __classPrivateFieldSet(this, _Renderer_callback, drawend, \"f\");\n        __classPrivateFieldSet(this, _Renderer_display, [__classPrivateFieldGet(this, _Renderer_canvas, \"f\").width, __classPrivateFieldGet(this, _Renderer_canvas, \"f\").height], \"f\");\n        this.enableBVH = Number(true);\n        this.maxBounces = 4;\n    }\n    InitDevices() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!navigator.gpu)\n                return -1;\n            __classPrivateFieldSet(this, _Renderer_adaptor, yield ((_a = navigator.gpu) === null || _a === void 0 ? void 0 : _a.requestAdapter()), \"f\");\n            __classPrivateFieldSet(this, _Renderer_device, yield ((_b = __classPrivateFieldGet(this, _Renderer_adaptor, \"f\")) === null || _b === void 0 ? void 0 : _b.requestDevice()), \"f\");\n            __classPrivateFieldSet(this, _Renderer_context, __classPrivateFieldGet(this, _Renderer_canvas, \"f\").getContext(\"webgpu\"), \"f\");\n            __classPrivateFieldSet(this, _Renderer_format, navigator.gpu.getPreferredCanvasFormat(), \"f\");\n            __classPrivateFieldGet(this, _Renderer_context, \"f\").configure({\n                device: __classPrivateFieldGet(this, _Renderer_device, \"f\"),\n                format: __classPrivateFieldGet(this, _Renderer_format, \"f\"),\n                alphaMode: \"opaque\"\n            });\n            return 1;\n        });\n    }\n    InitPipeline() {\n        const raytracing_bindgroup_layout = __classPrivateFieldGet(this, _Renderer_device, \"f\").createBindGroupLayout({\n            entries: [\n                {\n                    binding: 0,\n                    visibility: GPUShaderStage.COMPUTE,\n                    storageTexture: {\n                        access: \"write-only\",\n                        format: \"rgba8unorm\",\n                        viewDimension: \"2d\"\n                    },\n                },\n                {\n                    binding: 1,\n                    visibility: GPUShaderStage.COMPUTE,\n                    buffer: {}\n                },\n                {\n                    binding: 2,\n                    visibility: GPUShaderStage.COMPUTE,\n                    buffer: {\n                        type: \"read-only-storage\",\n                        hasDynamicOffset: false\n                    }\n                },\n                {\n                    binding: 3,\n                    visibility: GPUShaderStage.COMPUTE,\n                    buffer: {\n                        type: \"read-only-storage\",\n                        hasDynamicOffset: false\n                    }\n                },\n                {\n                    binding: 4,\n                    visibility: GPUShaderStage.COMPUTE,\n                    buffer: {\n                        type: \"read-only-storage\",\n                        hasDynamicOffset: false\n                    }\n                },\n                {\n                    binding: 5,\n                    visibility: GPUShaderStage.COMPUTE,\n                    texture: {\n                        viewDimension: \"cube\"\n                    }\n                },\n                {\n                    binding: 6,\n                    visibility: GPUShaderStage.COMPUTE,\n                    sampler: {}\n                }\n            ]\n        });\n        __classPrivateFieldSet(this, _Renderer_raytracing_bindgroup, __classPrivateFieldGet(this, _Renderer_device, \"f\").createBindGroup({\n            layout: raytracing_bindgroup_layout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: __classPrivateFieldGet(this, _Renderer_color_buffer_view, \"f\")\n                },\n                {\n                    binding: 1,\n                    resource: {\n                        buffer: __classPrivateFieldGet(this, _Renderer_sceneUniform, \"f\")\n                    }\n                },\n                {\n                    binding: 2,\n                    resource: {\n                        buffer: __classPrivateFieldGet(this, _Renderer_vertexBuffer, \"f\")\n                    }\n                },\n                {\n                    binding: 3,\n                    resource: {\n                        buffer: __classPrivateFieldGet(this, _Renderer_nodeBuffer, \"f\")\n                    }\n                },\n                {\n                    binding: 4,\n                    resource: {\n                        buffer: __classPrivateFieldGet(this, _Renderer_meshIndexBuffer, \"f\")\n                    }\n                },\n                {\n                    binding: 5,\n                    resource: __classPrivateFieldGet(this, _Renderer_cubeMapTextureView, \"f\")\n                },\n                {\n                    binding: 6,\n                    resource: __classPrivateFieldGet(this, _Renderer_cubeMapSampler, \"f\")\n                }\n            ]\n        }), \"f\");\n        const raytracing_pipeline_layout = __classPrivateFieldGet(this, _Renderer_device, \"f\").createPipelineLayout({\n            bindGroupLayouts: [raytracing_bindgroup_layout]\n        });\n        __classPrivateFieldSet(this, _Renderer_raytracing_pipeline, __classPrivateFieldGet(this, _Renderer_device, \"f\").createComputePipeline({\n            layout: raytracing_pipeline_layout,\n            compute: {\n                module: __classPrivateFieldGet(this, _Renderer_device, \"f\").createShaderModule({\n                    code: _shaders_raytracing_kernel_wgsl__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n                }),\n                entryPoint: \"main\"\n            }\n        }), \"f\");\n        const rendering_bindgroup_layout = __classPrivateFieldGet(this, _Renderer_device, \"f\").createBindGroupLayout({\n            entries: [\n                {\n                    binding: 0,\n                    visibility: GPUShaderStage.FRAGMENT,\n                    sampler: {}\n                },\n                {\n                    binding: 1,\n                    visibility: GPUShaderStage.FRAGMENT,\n                    texture: {}\n                }\n            ]\n        });\n        __classPrivateFieldSet(this, _Renderer_rendering_bindgroup, __classPrivateFieldGet(this, _Renderer_device, \"f\").createBindGroup({\n            layout: rendering_bindgroup_layout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: __classPrivateFieldGet(this, _Renderer_sampler, \"f\")\n                },\n                {\n                    binding: 1,\n                    resource: __classPrivateFieldGet(this, _Renderer_color_buffer_view, \"f\")\n                }\n            ]\n        }), \"f\");\n        const rendering_pipeline_layout = __classPrivateFieldGet(this, _Renderer_device, \"f\").createPipelineLayout({\n            bindGroupLayouts: [rendering_bindgroup_layout]\n        });\n        __classPrivateFieldSet(this, _Renderer_rendering_pipeline, __classPrivateFieldGet(this, _Renderer_device, \"f\").createRenderPipeline({\n            layout: rendering_pipeline_layout,\n            vertex: {\n                module: __classPrivateFieldGet(this, _Renderer_device, \"f\").createShaderModule({\n                    code: _shaders_renderer_kernel_wgsl__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n                }),\n                entryPoint: \"vs_main\"\n            },\n            fragment: {\n                module: __classPrivateFieldGet(this, _Renderer_device, \"f\").createShaderModule({\n                    code: _shaders_renderer_kernel_wgsl__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n                }),\n                entryPoint: \"fs_main\",\n                targets: [\n                    {\n                        format: \"bgra8unorm\"\n                    }\n                ],\n            },\n            primitive: {\n                topology: \"triangle-list\"\n            }\n        }), \"f\");\n    }\n    InitAssets() {\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldSet(this, _Renderer_color_buffer, __classPrivateFieldGet(this, _Renderer_device, \"f\").createTexture({\n                size: {\n                    width: __classPrivateFieldGet(this, _Renderer_display, \"f\")[0],\n                    height: __classPrivateFieldGet(this, _Renderer_display, \"f\")[1]\n                },\n                format: \"rgba8unorm\",\n                usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING\n            }), \"f\");\n            __classPrivateFieldSet(this, _Renderer_color_buffer_view, __classPrivateFieldGet(this, _Renderer_color_buffer, \"f\").createView(), \"f\");\n            __classPrivateFieldSet(this, _Renderer_sampler, __classPrivateFieldGet(this, _Renderer_device, \"f\").createSampler({\n                addressModeU: \"repeat\",\n                addressModeV: \"repeat\",\n                magFilter: \"linear\",\n                minFilter: \"nearest\",\n                maxAnisotropy: 1\n            }), \"f\");\n            __classPrivateFieldSet(this, _Renderer_sceneUniform, __classPrivateFieldGet(this, _Renderer_device, \"f\").createBuffer({\n                size: 64,\n                usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n            }), \"f\");\n            __classPrivateFieldSet(this, _Renderer_vertexBuffer, __classPrivateFieldGet(this, _Renderer_device, \"f\").createBuffer({\n                size: 32 * __classPrivateFieldGet(this, _Renderer_scene, \"f\").Mesh.length,\n                usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST\n            }), \"f\");\n            const meshData = new Float32Array(8 * __classPrivateFieldGet(this, _Renderer_scene, \"f\").Mesh.length);\n            for (let i = 0; i < __classPrivateFieldGet(this, _Renderer_scene, \"f\").Mesh.length; i++) {\n                // position\n                meshData[8 * i] = __classPrivateFieldGet(this, _Renderer_scene, \"f\").Mesh[i].VertexData[0];\n                meshData[8 * i + 1] = __classPrivateFieldGet(this, _Renderer_scene, \"f\").Mesh[i].VertexData[1];\n                meshData[8 * i + 2] = __classPrivateFieldGet(this, _Renderer_scene, \"f\").Mesh[i].VertexData[2];\n                //padding\n                meshData[8 * i + 3] = 0.0;\n                // color\n                meshData[8 * i + 4] = __classPrivateFieldGet(this, _Renderer_scene, \"f\").Mesh[i].VertexData[3];\n                meshData[8 * i + 5] = __classPrivateFieldGet(this, _Renderer_scene, \"f\").Mesh[i].VertexData[4];\n                meshData[8 * i + 6] = __classPrivateFieldGet(this, _Renderer_scene, \"f\").Mesh[i].VertexData[5];\n                // raduis\n                meshData[8 * i + 7] = __classPrivateFieldGet(this, _Renderer_scene, \"f\").Mesh[i].VertexData[6];\n            }\n            __classPrivateFieldGet(this, _Renderer_device, \"f\").queue.writeBuffer(__classPrivateFieldGet(this, _Renderer_vertexBuffer, \"f\"), 0, meshData);\n            __classPrivateFieldSet(this, _Renderer_nodeBuffer, __classPrivateFieldGet(this, _Renderer_device, \"f\").createBuffer({\n                size: __classPrivateFieldGet(this, _Renderer_scene, \"f\").bvh.storage.byteLength,\n                usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n            }), \"f\");\n            __classPrivateFieldGet(this, _Renderer_device, \"f\").queue.writeBuffer(__classPrivateFieldGet(this, _Renderer_nodeBuffer, \"f\"), 0, __classPrivateFieldGet(this, _Renderer_scene, \"f\").bvh.storage);\n            __classPrivateFieldSet(this, _Renderer_meshIndexBuffer, __classPrivateFieldGet(this, _Renderer_device, \"f\").createBuffer({\n                size: _constants_const__WEBPACK_IMPORTED_MODULE_2__.F32 * __classPrivateFieldGet(this, _Renderer_scene, \"f\").bvh.meshIndices.length,\n                usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n            }), \"f\");\n            __classPrivateFieldGet(this, _Renderer_device, \"f\").queue.writeBuffer(__classPrivateFieldGet(this, _Renderer_meshIndexBuffer, \"f\"), 0, __classPrivateFieldGet(this, _Renderer_scene, \"f\").bvh.meshIndices);\n            yield __classPrivateFieldGet(this, _Renderer_instances, \"m\", _Renderer_loadCubemap).call(this, __classPrivateFieldGet(this, _Renderer_scene, \"f\").cubeMap);\n        });\n    }\n    submitScene(scene) {\n        __classPrivateFieldSet(this, _Renderer_scene, scene, \"f\");\n    }\n    Draw() {\n        return __awaiter(this, void 0, void 0, function* () {\n            __classPrivateFieldGet(this, _Renderer_instances, \"m\", _Renderer_passBuffers).call(this);\n            const commandEncoder = __classPrivateFieldGet(this, _Renderer_device, \"f\").createCommandEncoder();\n            const raytracingPass = commandEncoder.beginComputePass();\n            raytracingPass.setPipeline(__classPrivateFieldGet(this, _Renderer_raytracing_pipeline, \"f\"));\n            raytracingPass.setBindGroup(0, __classPrivateFieldGet(this, _Renderer_raytracing_bindgroup, \"f\"));\n            raytracingPass.dispatchWorkgroups(__classPrivateFieldGet(this, _Renderer_display, \"f\")[0], __classPrivateFieldGet(this, _Renderer_display, \"f\")[1], 1);\n            raytracingPass.end();\n            const canvasView = __classPrivateFieldGet(this, _Renderer_context, \"f\").getCurrentTexture().createView();\n            const renderPass = commandEncoder.beginRenderPass({\n                colorAttachments: [{\n                        view: canvasView,\n                        clearValue: { r: 0.5, g: 0.0, b: 0.25, a: 1.0 },\n                        loadOp: \"clear\",\n                        storeOp: \"store\"\n                    }]\n            });\n            renderPass.setPipeline(__classPrivateFieldGet(this, _Renderer_rendering_pipeline, \"f\"));\n            renderPass.setBindGroup(0, __classPrivateFieldGet(this, _Renderer_rendering_bindgroup, \"f\"));\n            renderPass.draw(6, 1, 0, 0);\n            renderPass.end();\n            __classPrivateFieldGet(this, _Renderer_device, \"f\").queue.submit([commandEncoder.finish()]);\n            // needs fix\n            __classPrivateFieldGet(this, _Renderer_device, \"f\").queue.onSubmittedWorkDone().then(() => {\n                __classPrivateFieldGet(this, _Renderer_callback, \"f\").call(this);\n            });\n        });\n    }\n    get device() { return __classPrivateFieldGet(this, _Renderer_device, \"f\"); }\n}\n_Renderer_device = new WeakMap(), _Renderer_adaptor = new WeakMap(), _Renderer_context = new WeakMap(), _Renderer_format = new WeakMap(), _Renderer_canvas = new WeakMap(), _Renderer_raytracing_pipeline = new WeakMap(), _Renderer_raytracing_bindgroup = new WeakMap(), _Renderer_rendering_pipeline = new WeakMap(), _Renderer_rendering_bindgroup = new WeakMap(), _Renderer_color_buffer = new WeakMap(), _Renderer_color_buffer_view = new WeakMap(), _Renderer_sampler = new WeakMap(), _Renderer_sceneUniform = new WeakMap(), _Renderer_vertexBuffer = new WeakMap(), _Renderer_nodeBuffer = new WeakMap(), _Renderer_meshIndexBuffer = new WeakMap(), _Renderer_cubeMapTexture = new WeakMap(), _Renderer_cubeMapTextureView = new WeakMap(), _Renderer_cubeMapSampler = new WeakMap(), _Renderer_scene = new WeakMap(), _Renderer_display = new WeakMap(), _Renderer_callback = new WeakMap(), _Renderer_instances = new WeakSet(), _Renderer_loadCubemap = function _Renderer_loadCubemap(cubeMaptexture) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const imageData = new Array(6);\n        for (let i = 0; i < 6; i++) {\n            const response = yield fetch(cubeMaptexture.urls[i]);\n            const blob = yield response.blob();\n            imageData[i] = yield createImageBitmap(blob);\n        }\n        __classPrivateFieldSet(this, _Renderer_cubeMapTexture, __classPrivateFieldGet(this, _Renderer_device, \"f\").createTexture({\n            dimension: \"2d\",\n            size: {\n                width: imageData[0].width,\n                height: imageData[0].height,\n                depthOrArrayLayers: 6\n            },\n            format: \"rgba8unorm\",\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT\n        }), \"f\");\n        for (let i = 0; i < 6; i++) {\n            __classPrivateFieldGet(this, _Renderer_device, \"f\").queue.copyExternalImageToTexture({\n                source: imageData[i]\n            }, {\n                texture: __classPrivateFieldGet(this, _Renderer_cubeMapTexture, \"f\"),\n                origin: [0, 0, i]\n            }, [imageData[0].width, imageData[0].height]);\n        }\n        __classPrivateFieldSet(this, _Renderer_cubeMapTextureView, __classPrivateFieldGet(this, _Renderer_cubeMapTexture, \"f\").createView({\n            format: \"rgba8unorm\",\n            dimension: \"cube\",\n            aspect: \"all\",\n            baseMipLevel: 0,\n            mipLevelCount: 1,\n            baseArrayLayer: 0,\n            arrayLayerCount: 6\n        }), \"f\");\n        __classPrivateFieldSet(this, _Renderer_cubeMapSampler, __classPrivateFieldGet(this, _Renderer_device, \"f\").createSampler({\n            addressModeU: \"repeat\",\n            addressModeV: \"repeat\",\n            magFilter: \"linear\",\n            minFilter: \"nearest\",\n            maxAnisotropy: 1\n        }), \"f\");\n    });\n}, _Renderer_passBuffers = function _Renderer_passBuffers() {\n    __classPrivateFieldGet(this, _Renderer_device, \"f\").queue.writeBuffer(__classPrivateFieldGet(this, _Renderer_sceneUniform, \"f\"), 0, new Float32Array([\n        __classPrivateFieldGet(this, _Renderer_scene, \"f\").Player.Position[0],\n        __classPrivateFieldGet(this, _Renderer_scene, \"f\").Player.Position[1],\n        __classPrivateFieldGet(this, _Renderer_scene, \"f\").Player.Position[2],\n        this.enableBVH,\n        __classPrivateFieldGet(this, _Renderer_scene, \"f\").Player.Forward[0],\n        __classPrivateFieldGet(this, _Renderer_scene, \"f\").Player.Forward[1],\n        __classPrivateFieldGet(this, _Renderer_scene, \"f\").Player.Forward[2],\n        this.maxBounces,\n        __classPrivateFieldGet(this, _Renderer_scene, \"f\").Player.Right[0],\n        __classPrivateFieldGet(this, _Renderer_scene, \"f\").Player.Right[1],\n        __classPrivateFieldGet(this, _Renderer_scene, \"f\").Player.Right[2],\n        // padded, can be replaced\n        3,\n        __classPrivateFieldGet(this, _Renderer_scene, \"f\").Player.Up[0],\n        __classPrivateFieldGet(this, _Renderer_scene, \"f\").Player.Up[1],\n        __classPrivateFieldGet(this, _Renderer_scene, \"f\").Player.Up[2],\n        __classPrivateFieldGet(this, _Renderer_scene, \"f\").Mesh.length\n    ]));\n};\n\n\n//# sourceURL=webpack://mars-raytracer/./src/view/renderer.ts?");

/***/ }),

/***/ "./src/view/shaders/raytracing_kernel.wgsl":
/*!*************************************************!*\
  !*** ./src/view/shaders/raytracing_kernel.wgsl ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"const INF: f32 = 99999.0;\\r\\nconst VEC3_INF: vec3<f32> = vec3(INF, INF, INF);\\r\\n\\r\\nstruct Sphere {\\r\\n    center: vec3<f32>,\\r\\n    color: vec3<f32>,\\r\\n    radius: f32\\r\\n}\\r\\n\\r\\nstruct ObjectData {\\r\\n    spheres: array<Sphere>\\r\\n}\\r\\n\\r\\nstruct Node {\\r\\n    minCorner: vec3<f32>,\\r\\n    leftChild: f32,\\r\\n    maxCorner: vec3<f32>,\\r\\n    sphereCount: f32,\\r\\n}\\r\\n\\r\\nstruct Ray {\\r\\n    origin: vec3<f32>,\\r\\n    direction: vec3<f32>\\r\\n}\\r\\n\\r\\nstruct SceneData {\\r\\n    cameraPos: vec3<f32>,\\r\\n    enableBVH: f32,\\r\\n    cameraForward: vec3<f32>,\\r\\n    maxBounces: f32,\\r\\n    cameraRight: vec3<f32>,\\r\\n    cameraUp: vec3<f32>,\\r\\n    sphereCount: f32\\r\\n}\\r\\n\\r\\nstruct RenderState {\\r\\n    color: vec3<f32>,\\r\\n    position: vec3<f32>,\\r\\n    normal: vec3<f32>,\\r\\n}\\r\\n\\r\\nstruct HitTestInfo {\\r\\n    t: f32,\\r\\n    position: vec3<f32>,\\r\\n    normal:vec3<f32>\\r\\n}\\r\\n\\r\\n@group(0) @binding(0) var color_buffer: texture_storage_2d<rgba8unorm, write>;\\r\\n@group(0) @binding(1) var<uniform> scene: SceneData;\\r\\n@group(0) @binding(2) var<storage, read> objects: ObjectData;\\r\\n@group(0) @binding(3) var<storage, read> tree: array<Node>;\\r\\n@group(0) @binding(4) var<storage, read> sphereLookup: array<f32>;\\r\\n@group(0) @binding(5) var skyMap: texture_cube<f32>;\\r\\n@group(0) @binding(6) var skysampler: sampler;\\r\\n\\r\\n@compute @workgroup_size(1,1,1)\\r\\nfn main(@builtin(global_invocation_id) GlobalInvocationID: vec3<u32>) {\\r\\n\\r\\n    let screen_size: vec2<i32> = vec2<i32>(textureDimensions(color_buffer));\\r\\n    let screen_pos: vec2<i32> = vec2<i32>(i32(GlobalInvocationID.x), i32(GlobalInvocationID.y));\\r\\n\\r\\n    let horizontal_coeff: f32 = (f32(screen_pos.x) - f32(screen_size.x) / 2) / f32(screen_size.x);\\r\\n    let vertical_coeff: f32 = (f32(screen_pos.y) - f32(screen_size.y) / 2) / f32(screen_size.y);\\r\\n    let forward: vec3<f32> = scene.cameraForward;\\r\\n    let right: vec3<f32> = scene.cameraRight;\\r\\n    let up: vec3<f32> = scene.cameraUp;\\r\\n\\r\\n    var background: vec3<f32>;\\r\\n\\r\\n    var myRay: Ray;\\r\\n    myRay.direction = normalize(forward + horizontal_coeff*right+vertical_coeff * up);\\r\\n    myRay.origin = scene.cameraPos;\\r\\n\\r\\n    background = rayColor(myRay);\\r\\n\\r\\n    textureStore(color_buffer, screen_pos, vec4<f32>(background, 1.0));\\r\\n}\\r\\n\\r\\nfn rayColor(ray: Ray) -> vec3<f32> {\\r\\n    var color: vec3<f32> = vec3(1.0, 1.0, 1.0);\\r\\n    var result: RenderState;\\r\\n\\r\\n    var tempRay: Ray;\\r\\n    tempRay.origin = ray.origin;\\r\\n    tempRay.direction = ray.direction;\\r\\n\\r\\n    let bounces: u32 = u32(scene.maxBounces);\\r\\n    for(var bounce: u32; bounce < bounces; bounce++) {\\r\\n        result = trace(tempRay);\\r\\n\\r\\n        color *= result.color;\\r\\n\\r\\n        if(result.normal[0] == INF) {\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        tempRay.origin = result.position;\\r\\n        tempRay.direction = normalize(reflect(tempRay.direction, result.normal));\\r\\n    }\\r\\n\\r\\n    // short the ray, if it still bounces\\r\\n    if(result.normal[0] != INF) {\\r\\n        color = vec3(0.0, 0.0, 0.0);\\r\\n    }\\r\\n\\r\\n    return color;\\r\\n}\\r\\n\\r\\nfn trace(ray: Ray) -> RenderState {\\r\\n    \\r\\n    var renderState: RenderState;\\r\\n\\r\\n    //inits\\r\\n    renderState.color = vec3(1.0, 1.0, 1.0);\\r\\n    renderState.normal = VEC3_INF;\\r\\n    var nearestHit: f32 = INF;\\r\\n\\r\\n    var node: Node = tree[0];\\r\\n    var stack: array<Node, 15>;\\r\\n    var stackLocation: u32 = 0;\\r\\n\\r\\n    if(!bool(scene.enableBVH)) {\\r\\n        for(var i: u32 = 0; i < u32(scene.sphereCount); i++) {\\r\\n            let res: HitTestInfo = hitSphere(ray, objects.spheres[i], 0.001, nearestHit);\\r\\n            if(res.t != nearestHit) {\\r\\n                nearestHit = res.t;\\r\\n                renderState.position = res.position;\\r\\n                renderState.normal = res.normal;\\r\\n                renderState.color = objects.spheres[i].color;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(renderState.normal[0] == INF) {\\r\\n            renderState.color = textureSampleLevel(skyMap, skysampler, ray.direction, 0.0).xyz;\\r\\n        }\\r\\n\\r\\n        return renderState;\\r\\n    }\\r\\n\\r\\n    while(true) {\\r\\n        var sphereCount: u32 = u32(node.sphereCount);\\r\\n        var contents: u32 = u32(node.leftChild);\\r\\n\\r\\n        if (sphereCount == 0) {\\r\\n            var child1: Node = tree[contents];\\r\\n            var child2: Node = tree[contents + 1];\\r\\n\\r\\n            var distance1: f32 = hitAABB(ray, child1);\\r\\n            var distance2: f32 = hitAABB(ray, child2);\\r\\n            if (distance1 > distance2) {\\r\\n                var tempDist: f32 = distance1;\\r\\n                distance1 = distance2;\\r\\n                distance2 = tempDist;\\r\\n\\r\\n                var tempChild: Node = child1;\\r\\n                child1 = child2;\\r\\n                child2 = tempChild;\\r\\n            }\\r\\n\\r\\n            if (distance1 > nearestHit) {\\r\\n                if (stackLocation == 0) {\\r\\n                    break;\\r\\n                }\\r\\n                else {\\r\\n                    stackLocation -= 1;\\r\\n                    node = stack[stackLocation];\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                node = child1;\\r\\n                if (distance2 < nearestHit) {\\r\\n                    stack[stackLocation] = child2;\\r\\n                    stackLocation += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //external node\\r\\n        else {\\r\\n            for(var i: u32 = 0; i < u32(sphereCount); i++) {\\r\\n                let res: HitTestInfo = hitSphere(ray, objects.spheres[u32(sphereLookup[contents + i])], 0.001, nearestHit);\\r\\n                if(res.t != nearestHit) {\\r\\n                    nearestHit = res.t;\\r\\n                    renderState.position = res.position;\\r\\n                    renderState.normal = res.normal;\\r\\n                    renderState.color = objects.spheres[u32(sphereLookup[contents + i])].color;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (stackLocation == 0) {\\r\\n                break;\\r\\n            }\\r\\n            else {\\r\\n                stackLocation -= 1;\\r\\n                node = stack[stackLocation];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if(renderState.normal[0] == INF) {\\r\\n        renderState.color = textureSampleLevel(skyMap, skysampler, ray.direction, 0.0).xyz;\\r\\n    }\\r\\n\\r\\n    return renderState;\\r\\n}\\r\\n\\r\\nfn hitSphere(ray: Ray, sphere: Sphere, tMin:f32 , tMax: f32) -> HitTestInfo {\\r\\n    \\r\\n    var testInfo: HitTestInfo;\\r\\n    testInfo.t = tMax;\\r\\n\\r\\n    let co: vec3<f32> = ray.origin - sphere.center;\\r\\n    let a: f32 = dot(ray.direction, ray.direction);\\r\\n    let b: f32 = 2.0 * dot(ray.direction, co);\\r\\n    let c: f32 = dot(co, co) - pow(sphere.radius, 2);\\r\\n\\r\\n    let det: f32 = pow(b, 2) - 4.0 * a * c;\\r\\n\\r\\n    if(det > 0.0) {\\r\\n        let t: f32 = (-b - sqrt(det))/ (2 * a);\\r\\n        if(t > tMin && t < tMax) {\\r\\n            testInfo.t = t;\\r\\n            testInfo.position = ray.origin + t * ray.direction;\\r\\n            testInfo.normal = normalize(testInfo.position - sphere.center);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return testInfo;\\r\\n}\\r\\n\\r\\n// Make sense of this!!\\r\\nfn hitAABB(ray: Ray, node: Node) -> f32 {\\r\\n    var inverseDir: vec3<f32> = vec3(1.0) / ray.direction;\\r\\n    var t1: vec3<f32> = (node.minCorner - ray.origin) * inverseDir;\\r\\n    var t2: vec3<f32> = (node.maxCorner - ray.origin) * inverseDir;\\r\\n    var Min: vec3<f32> = min(t1, t2);\\r\\n    var Max: vec3<f32> = max(t1, t2);\\r\\n\\r\\n    var tMin: f32 = max(max(Min.x, Min.y), Min.z);\\r\\n    var tMax: f32 = min(min(Max.x, Max.y), Max.z);\\r\\n\\r\\n    if (tMin > tMax || tMax < 0) {\\r\\n        return 99999;\\r\\n    }\\r\\n    else {\\r\\n        return tMin;\\r\\n    }\\r\\n}\");\n\n//# sourceURL=webpack://mars-raytracer/./src/view/shaders/raytracing_kernel.wgsl?");

/***/ }),

/***/ "./src/view/shaders/renderer_kernel.wgsl":
/*!***********************************************!*\
  !*** ./src/view/shaders/renderer_kernel.wgsl ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"@group(0) @binding(0) var screen_sampler: sampler;\\r\\n@group(0) @binding(1) var color_buffer: texture_2d<f32>;\\r\\n\\r\\nstruct VertexOutput {\\r\\n    @builtin(position) Position: vec4<f32>,\\r\\n    @location(0) Texcoord: vec2<f32>\\r\\n}\\r\\n\\r\\n@vertex\\r\\nfn vs_main(@builtin(vertex_index) VertexIndex: u32) -> VertexOutput {\\r\\n    var pos = array<vec2<f32>, 6>(\\r\\n        vec2<f32>(1.0, 1.0),\\r\\n        vec2<f32>(1.0, -1.0),\\r\\n        vec2<f32>(-1.0, -1.0),\\r\\n        vec2<f32>(1.0, 1.0),\\r\\n        vec2<f32>(-1.0, -1.0),\\r\\n        vec2<f32>(-1.0, 1.0),\\r\\n    );\\r\\n\\r\\n    var texcoord = array<vec2<f32>, 6>(\\r\\n        vec2<f32>(1.0, 0.0),\\r\\n        vec2<f32>(1.0, 1.0),\\r\\n        vec2<f32>(0.0, 1.0),\\r\\n        vec2<f32>(1.0, 0.0),\\r\\n        vec2<f32>(0.0, 1.0),\\r\\n        vec2<f32>(0.0, 0.0),\\r\\n    );\\r\\n\\r\\n    var output: VertexOutput;\\r\\n\\r\\n    output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\\r\\n    output.Texcoord = texcoord[VertexIndex];\\r\\n    return output;\\r\\n}\\r\\n\\r\\n@fragment\\r\\nfn fs_main(@location(0) TexCoord: vec2<f32>) -> @location(0) vec4<f32> {\\r\\n    return textureSample(color_buffer, screen_sampler, TexCoord);\\r\\n}\");\n\n//# sourceURL=webpack://mars-raytracer/./src/view/shaders/renderer_kernel.wgsl?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;